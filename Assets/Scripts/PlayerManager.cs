using System.Collections.Generic;
using UnityEngine;
using Unity.Netcode;
using Steamworks;

public class PlayerManager : NetworkBehaviour {
    public static PlayerManager Instance;

    private Dictionary<ulong, SteamId> clientToSteam = new Dictionary<ulong, SteamId>();
    private Dictionary<SteamId, Transform> players = new Dictionary<SteamId, Transform>();

    private List<(SteamId, ulong)> pendingRegistrations = new List<(SteamId, ulong)>();

    private void Awake() {
        if (Instance == null) {
            Instance = this;
            DontDestroyOnLoad(gameObject);
            Debug.Log("[PlayerManager] –°–æ–∑–¥–∞–Ω (Singleton, DontDestroyOnLoad)");
        } else {
            Destroy(gameObject);
        }
    }

    private void Start() {
        if (NetworkManager.Singleton != null) {
            NetworkManager.Singleton.OnClientConnectedCallback += OnClientConnected;
            NetworkManager.Singleton.OnClientDisconnectCallback += OnClientDisconnected;
        }
    }

    private void Update() {
        if (pendingRegistrations.Count > 0) {
            for (int i = pendingRegistrations.Count - 1; i >= 0; i--) {
                var (sid, clientId) = pendingRegistrations[i];
                if (TryAttachPlayer(sid, clientId)) {
                    Debug.Log($"[PlayerManager] –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è {sid} (clientId={clientId})");
                    pendingRegistrations.RemoveAt(i);
                }
            }
        }
    }

    private void OnClientConnected(ulong clientId) {
        Debug.Log($"[PlayerManager] –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è clientId={clientId}");

        // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä—É —Å–≤–æ–π SteamId
        if (clientId == NetworkManager.Singleton.LocalClientId && NetworkManager.Singleton.IsClient) {
            Debug.Log($"[PlayerManager] –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—É SteamId {SteamClient.SteamId}");
            RegisterSteamIdServerRpc((ulong)SteamClient.SteamId, clientId);
        }
    }

    private void OnClientDisconnected(ulong clientId) {
        if (clientToSteam.TryGetValue(clientId, out SteamId steamId)) {
            clientToSteam.Remove(clientId);

            if (IsServer)
                UnregisterPlayerClientRpc((ulong)steamId);

            Debug.Log($"[PlayerManager] –ò–≥—Ä–æ–∫ {steamId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (clientId={clientId})");
        }
    }

    [ServerRpc(RequireOwnership = false)]
    private void RegisterSteamIdServerRpc(ulong steamId, ulong clientId) {
        SteamId sid = (SteamId)steamId;

        if (!clientToSteam.ContainsKey(clientId)) {
            clientToSteam.Add(clientId, sid);
            Debug.Log($"[PlayerManager] –°–µ—Ä–≤–µ—Ä: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω SteamId {sid} –¥–ª—è clientId={clientId}");
        }

        // üì° –†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –∏–Ω—Ñ—É –ø—Ä–æ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        RegisterPlayerClientRpc(steamId, clientId);

        // üì° –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ù–û–í–û–ú–£ –∏–≥—Ä–æ–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –í–°–ï–• —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
        foreach (var kvp in clientToSteam) {
            if (kvp.Key == clientId) continue; // —Å–µ–±—è –æ–Ω —É–∂–µ –∑–Ω–∞–µ—Ç
            SendExistingPlayerClientRpc((ulong)kvp.Value, kvp.Key, new ClientRpcParams {
                Send = new ClientRpcSendParams { TargetClientIds = new[] { clientId } }
            });
        }
    }

    [ClientRpc]
    private void RegisterPlayerClientRpc(ulong steamId, ulong clientId) {
        SteamId sid = (SteamId)steamId;
        if (!TryAttachPlayer(sid, clientId)) {
            Debug.LogWarning($"[PlayerManager] –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–∑—É –ø—Ä–∏–≤—è–∑–∞—Ç—å {sid} (clientId={clientId}), –≤ –æ—á–µ—Ä–µ–¥—å");
            pendingRegistrations.Add((sid, clientId));
        }
    }

    [ClientRpc]
    private void SendExistingPlayerClientRpc(ulong steamId, ulong clientId, ClientRpcParams rpcParams = default) {
        SteamId sid = (SteamId)steamId;
        if (!TryAttachPlayer(sid, clientId)) {
            Debug.LogWarning(
                $"[PlayerManager] (–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è) –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å {sid} (clientId={clientId}), –≤ –æ—á–µ—Ä–µ–¥—å");
            pendingRegistrations.Add((sid, clientId));
        } else {
            Debug.Log($"[PlayerManager] (–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è) –ø—Ä–∏–≤—è–∑–∞–Ω {sid} (clientId={clientId}) –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞");
        }
    }

    [ClientRpc]
    private void UnregisterPlayerClientRpc(ulong steamId) {
        if (players.Remove((SteamId)steamId)) {
            Debug.Log($"[PlayerManager] –ö–ª–∏–µ–Ω—Ç: —É–¥–∞–ª—ë–Ω –∏–≥—Ä–æ–∫ {steamId}");
        }
    }

    private bool TryAttachPlayer(SteamId sid, ulong clientId) {
        if (NetworkManager.Singleton.ConnectedClients.TryGetValue(clientId, out var client)) {
            var playerObj = client.PlayerObject;
            if (playerObj != null) {
                if (!players.ContainsKey(sid)) {
                    players.Add(sid, playerObj.transform);
                    Debug.Log($"[PlayerManager] –ü—Ä–∏–≤—è–∑–∞–Ω {sid} ‚Üí {playerObj.name}");
                }

                return true;
            }
        }

        return false;
    }

    public Transform GetPlayerTransform(SteamId steamId) {
        if (players.TryGetValue(steamId, out Transform t))
            return t;

        Debug.LogWarning($"[PlayerManager] Transform –¥–ª—è {steamId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return null;
    }

    public SteamId? GetSteamIdByClientId(ulong clientId) {
        if (clientToSteam.TryGetValue(clientId, out SteamId sid))
            return sid;

        return null;
    }

    public IEnumerable<KeyValuePair<SteamId, Transform>> GetAllPlayers() {
        return players;
    }
}